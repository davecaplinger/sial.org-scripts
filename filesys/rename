#!/usr/bin/perl
#
# Mangle files with perl expressions: rename, copy, or move. Supports
# preview, to see what the damage will be. Run perldoc(1) on this file
# for additional documentation.
#
# This script is free software; you can redistribute it and/or modify it
# under the same terms as Perl itself.

use strict;
use warnings;

sub print_help;

use File::Basename qw/dirname/;
use File::Copy;
use File::Path::Tiny ();

use Getopt::Std;
my %opts;
my $opts_ok = getopts( 'h?cmMifvpn', \%opts );
print_help if exists $opts{h} or exists $opts{'?'} or !$opts_ok;

my $preview = (
       exists $opts{i}
    or exists $opts{p}
    or exists $opts{n}
    or exists $opts{v}
) ? 1 : 0;
my $interactive = ( exists $opts{i} and !exists $opts{f} ) ? 1 : 0;

# choose which function to use depending on argument; default is to
# use the rename() function, but that can be changed to one of copy()
# or move() from File::Copy if the name of the script is changed or
# appropriate argument is supplied
my $fn;
$fn = $opts{c} || $0 eq 'copy' ? 'copy' : 'rename';
$fn = $opts{m} || $0 eq 'move' ? 'move' : $fn;

# perl expression to run the files by
my $op = shift || print_help;

# read from STDIN if no args left
chomp( @ARGV = <STDIN> ) unless @ARGV;

# and flag the help text if nothing from STDIN
print_help unless @ARGV;

my $exit_status = 0;

{

  # loosen things up to ease off-the-cuff code on command line
  no strict;
  $^W = 0;

  for (@ARGV) {

    my $was = $_;

    eval $op;
    die "error: unable to eval expression: $@" if $@;

    next if $was eq $_;

    print $fn, ' ', $was, ' ', $_, "\n" if $preview;

    next if exists $opts{p} or exists $opts{n};
    if ( $fn eq 'copy' and !-f $was ) {
      # since File::Copy doesn't know what to do with directories (there
      # is File::Copy::Recursive...)
      warn "notice: refusing to copy non-file '$was'\n";
      $exit_status = 1;
      next;
    }

    if ( -e and $interactive ) {
      print "$_ exists.  Overwrite? (y/[n]) ";
      next unless <STDIN> =~ /^[Yy]/;
    }

    if ( exists $opts{M} ) {
      my $output_dir = dirname($_);
      File::Path::Tiny::mk($output_dir)
        or die "error: could not create path '$output_dir': $!\n";
    }

    unless ( eval "$fn(\$was, \$_)" ) {
      warn "warning: could not $fn $was to $_: $!\n";
      $exit_status = 1;
      next;
    }
  }
}

exit $exit_status;

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

# a generic help blarb
sub print_help {
  warn <<"HELP";
Usage: $0 [opts] perl-expression [file1 ..]

Mangle filenames using perl expressions.

Options:
  -h/-?  Display this message

  -n     dry run (show changes only, also available as -p)
  -v     be verbose

  -c     copy instead of rename
  -m     move instead of rename or copy

  -i     interactive, prompt if necessary
  -f     force (do not prompt to replace existing files)

  -M     Make directories if necessary

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

__END__

=head1 NAME

rename - mangle filenames using perl expressions

=head1 SYNOPSIS

Append .old to a bunch of files:

  $ rename 's/$/.old/' *

Fix the case on all .C files to lower, but only preview what would
be changed:

  $ rename -p 'tr/A-Z/a-z/' *.C

=head1 DESCRIPTION

A file renamer that uses user-supplied Perl expressions to rename files.
Optionally, the C<copy> or C<move> routines from L<File::Copy> may be
used instead of the built-in C<rename> function.

A preview mode is also available, to allow testing of expressions
before any changes are allowed to go to the filesystem.

Note that rename is primarily aimed at dealing with the files in the
current working directory, given that the rename function does not work
across different filesystems. Renaming parent directories before dealing
with any files deeper in the filesystem tree will not work by default
(see L<"EXAMPLES"> for solutions).

The exit status is zero if all goes well, or >0 on error. The script may
not abort in some cases if files fail to be handled; the exit status
will be non-zero in such cases, and standard error will contain
message(s) as to which files failed for what reasons.

=head1 USAGE

  $ rename [options] expression [file1 ...]

See L<"OPTIONS"> for details on the command line switches supported.

If no files are mentioned on the command line, the script will attempt
to read them from STDIN, allowing for easy inter-operation with various
shell utilities. For example, to change .htm files to .html:

  $ find . ! -type d -name "*.htm" | rename '$_ .= "l"'

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h> / B<-?>

Prints a brief usage note about the script.

=item B<-n>

Dry run, no changes will be made to disk. Also available as B<-p>.

=item B<-v>

Be verbose about the whole process.

=item B<-c>

Copy files instead of renaming them, using copy() from File::Copy.

=item B<-m>

Move files instead of renaming them.  Uses move() from File::Copy,
which may not be available in older versions of File::Copy.

Since rename() cannot be used across filesystem boundaries, and may
not be available on all systems, move() may be a better option in some
circumstances.

=item B<-M>

Attempts to create a target file path, if necessary. May require B<-c>
or B<-m>, as the default C<rename> does not work across filesystem
boundaries.

=item B<-i>

Interactive mode: prompts for confirmation.

=item B<-f>

Force mode.  Does not prompt to replace existing files.

=back

=head1 EXAMPLES

Remove upper case from all files in the working directory:

  $ rename '$_ = lc' *

Dealing with deep directories full of files to be changed can be
tricky, especially if the pattern in question is renaming directories,
which will throw off the rename of deeper files.

The solution is to first change all the directories, then go after the
files.  For example, to swap out "bad" characters with _ in a deep
file tree:

  $ find . -type d -exec rename 's/[^A-Za-z0-9,.\/_-]/_/g' {} \;
  $ find . -exec rename 's/[^A-Za-z0-9,.\/_-]/_/g' {} \;

A find-by-depth file search should also prevent directory rename
problems, though the exact invocation of this depends on the find(1)
variant being used.

=head1 SECURITY

This script must not be allowed to be run under elevated privileges, as
it accepts and runs arbitrary user-supplied Perl code fragments.

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

Bugs are left as an exercise to the expression writer.

See the documentation for the rename function being used for any
relevant warnings or limitations.

=head1 SEE ALSO

File::Copy, perl(1)

=head1 AUTHOR

Jeremy Mates

=head1 COPYRIGHT

This script is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 HISTORY

This is a hacked up version of Larry Wall's original rename script
distributed with perl under the eg directory, improved by Daniel
V. Klien (copy option, interactive mode), and then polished into this
form by Jeremy Mates (preview mode, move support, mkdir support).

=cut
