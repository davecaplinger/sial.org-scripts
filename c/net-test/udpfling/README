                       this in! UDP is, news at

Mostly practice via a reading of "Beej's Guide to Network Programming"
plus a work need to test various UDP related setups (or to see how many
UDP packets are lost in what circumstances). There are probably better
ways, altagoobingleduckgo them.

 * udp-sender sends packets, udp-sink listens for them. A counter is
   passed in the packet, soas to detect lost or out-of-order
   packets. Error checking is done at most every step, insofar as
   UDP allows for that.
 * Should be portable between Debian (6.0.7) Mac OS X (10.8) OpenBSD
   (5.2), though most testing done on OS X.

Usage:

  ./udp-sender
    -p portnum  Port number to send to. Mandatory.
    -4 | -6     Selects IPv4 or IPv6 (default is unspecified).
    -c n        Send count packets (default is a large number).
    -d ms | -f  Delay in milliseconds or flood the packets. (Default 5 ms).
    hostname    Host to connect to. Mandatory.

  ./udp-sink
    -p portnum  Port number to listen on. Mandatory.
    -4 | -6     Selects IPv4 or IPv6 (default is unspecified).
    -c n        Print stats ever so many packets.
    -l          Line buffer output instead of default - see setbuf(3).

So to test:

  ./udp-sink   -p 2952 -c 100000 -l | tee log

And feed it:

  ./udp-sender -p 2952 -f localhost

Questions:

What happens via loopback interface? If the system is busy? What happens
to virts, or between virts? If there is loss, how much does adding delay
remove the loss? Does running udp-sink & change the loss rate? What
happens to the loss rate if udp-sink needs to do more work between
recvfrom() calls? How could multiple sending processes (multiple
counters) be supported by udp-sink?
