#!/usr/bin/perl
#
# Converts epoch times to human parsable dates. Accepts list of epoch
# dates (integers) on command line. Use xargs(1) or similar to take
# input from a file.
#
# epoch2date `perl -le 'print time'`
# echo 1059673440 | xargs epoch2date
#
# The author disclaims all copyrights and releases this script into the
# public domain.

use strict;
use warnings;

use File::Basename qw(basename);
my $basename = basename $0;
use POSIX qw(strftime);

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    die "error: problem closing STDOUT: $!\n";
  }
}

use Getopt::Std;
my %opts;
getopts( 'f:r:glq', \%opts );

if ( not @ARGV or ( exists $opts{g} and exists $opts{l} ) ) {
  die
   "usage: $basename [-q] [-f fmt] [-r regex] [-g|-l] [epoch [epoch ...]|-]\n";
}

my $format = $opts{f} || "%Y-%m-%d %H:%M:%S";
$format =~ s/(\\.)/qq!"$1"!/eeg;

my $epoch_re = $opts{r} || '\d{9,10}';

# gmtime or localtime, depending on program name or options supplied
my $function = 'localtime';
$function = 'gmtime'    if $basename eq 'epoch2gmdate';
$function = 'localtime' if exists $opts{l};
$function = 'gmtime'    if exists $opts{g};

@ARGV = <STDIN> if $ARGV[-1] eq '-';

for my $entry (@ARGV) {
  # TODO need output templating so can include original value, otherwise
  # tweak output
  $entry =~ s/($epoch_re)/ strftime $format, eval "$function $1" /eg;
  print $entry;
  print $/ unless $entry =~ m/[\n\r]$/;
}

=pod SCRIPT CATEGORIES

Utilities

=cut

