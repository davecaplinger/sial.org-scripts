#!/usr/bin/perl -w
#
# Get latest file in a directory by mtime, optionally limiting the files
# to those that match a particular regular expression, or also
# optionally reading the filenames from standard input.
#
# Usage:  glf [regex] [directory|-]
#
#  glf
#  glf ^
#  glf ^ .                # these are equivalent usages. ^ is the fastest
#                         # regex to match any filename.
#
# NOTE that the regex should usually be quoted, as the shell involved
# may try to interpolate certain characters present the regex.
#
#  glf maillog /var/log   # return latest file whose name matches maillog
#
#  find /var/log -name "mail*" | glf    # supply filenames to search on
#                                       # standard input
#
# NOTE that glf operates differently if the directory is not supplied,
# depending on whether STDIN is connected to a terminal. Therefore, if
# glf is run from cron, the full arguments should always be supplied, to
# ensure that glf does not try to read from STDIN.
#
# perldoc perlre   For more information about the regular
#                  expression syntax.
#
# The author disclaims all copyrights and releases this script into the
# public domain.

use strict;
use File::Spec ();

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    die "error: problem closing STDOUT: $!\n";
  }
}

my $DEBUG = 0;

my $file_regex = shift;
my $directory  = shift;

if (! defined $file_regex) {
  $file_regex = qr/^/;
}

# This assumes one wants the current directory if STDIN is connected to
# a terminal, or assumes the files are being passed in on STDIN
# otherwise. See NOTE above if glf is run from cron (where STDIN will
# not be connected to a terminal).
if (! defined $directory) {
  if (-t STDIN) {
    $directory = '.';
  } else {
    $directory = '-';
  }
}

$directory = File::Spec->rel2abs($directory) unless $directory eq '-';
warn "info: checking directory $directory\n" if $DEBUG;

my $latest_mtime;
my $latest_file;

if ( $directory eq '-' ) {
  while ( my $file = <STDIN> ) {
    chomp($file);
    warn "info: considering file $file\n" if $DEBUG;
    handle_file($file);
  }
} else {
  # So that unqualified file paths relative to directory supplied, and
  # not whatever random directory the CWD inherits. Less expensive than
  # applying File::Spec->catfile() to each filename?
  chdir($directory) or die "error: cannot chdir $directory: $!\n";

  my $dir_handle;
  opendir( $dir_handle, "$directory" )
    or die "error: cannot open $directory: $!\n";

  while ( my $file = readdir($dir_handle) ) {
    warn "info: considering file $file\n" if $DEBUG;
    handle_file($file);
  }
}

if ( defined $latest_file ) {
  print $latest_file, $/;
  exit 0;

} else {
  exit 1;
}

sub handle_file {
  my $file = shift;
  return unless defined $file and length $file > 0;
  return unless $file =~ m/$file_regex/;
  return unless -f $file;

  my $file_mtime = ( stat($file) )[9];

  warn "info: file $file mtime $file_mtime\n" if $DEBUG;

  if ( !defined $latest_mtime or $file_mtime > $latest_mtime ) {
    $latest_mtime = $file_mtime;
    $latest_file  = $file;
  }
}
