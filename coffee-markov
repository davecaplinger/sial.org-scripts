#!/usr/bin/perl
#
# Example 2nd order markov (with fallback to first) for a model citizen
# before lunch. Consider instead: http://hailo.org/

use strict;
use warnings;
use List::Util qw(sum);

my %choice;
load_choices( \%choice );
normalize_choices( \%choice );

my @action = 'awaken';
while ( my $choice = next_choice( \@action, \%choice ) ) {
  push @action, $choice;
}
print join( ' ', @action ), "\n";

sub next_choice {
  my ( $actions, $choices ) = @_;

  my $consideration;
  if ( @$actions > 1 ) {
    $consideration = join '.', @{$actions}[ -2 .. -1 ];
  } else {
    $consideration = $actions->[-1];
  }
  my $target_ref = $choices->{$consideration};

  warn "info: for $actions->[-1] picking from $consideration\n";

  my $choice;
  my $rand = rand;
  for my $target (
    sort { $target_ref->{$b} <=> $target_ref->{$a} }
    keys %$target_ref
    ) {
    $choice = $target if $target_ref->{$target} >= $rand;
  }
  return $choice;
}

sub load_choices {
  my ($choices) = @_;
  while ( my $line = readline DATA ) {
    my @actions = split ' ', $line;
    for my $i ( 0 .. $#actions ) {
      $choices->{ $actions[$i] }->{ $actions[ $i + 1 ] }++
        unless $i == $#actions;
      $choices->{ join '.', @actions[ $i .. $i + 1 ] }
        ->{ $actions[ $i + 2 ] }++
        unless $i >= $#actions - 1;
    }
  }
}

sub normalize_choices {
  my ($choice_ref) = @_;

  for my $choice ( keys %$choice_ref ) {
    my $target_sum = sum values %{ $choice_ref->{$choice} };
    my $factor = ( $target_sum != 1 ) ? 1 / $target_sum : 1;

    my $running_total = 0;
    for my $target_value ( values %{ $choice_ref->{$choice} } ) {
      $target_value  = $target_value * $factor + $running_total;
      $running_total = $target_value;
    }
  }
}

__DATA__
awaken transit coffee work lunch
awaken transit coffee work lunch
awaken transit coffee coffee work lunch
awaken transit coffee coffee work lunch
awaken transit coffee coffee work lunch
awaken transit coffee coffee work lunch
awaken transit coffee lunch
